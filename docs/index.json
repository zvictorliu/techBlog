[{"categories":["Development"],"content":"采用DMA方式用DAC输出正弦波 ","date":"2023-05-19","objectID":"/techBlog/posts/stm32_dac_dma/:0:0","tags":["STM32"],"title":"STM32 DAC+DMA 输出正弦波","uri":"/techBlog/posts/stm32_dac_dma/"},{"categories":["Development"],"content":"DAC 我们希望每隔一定时间输出一个电压值 这需要DAC到时间被触发Trigger，所以，对DAC的配置是： 这里Trigger选择了定时器5来触发DAC，其它几个参数可无视，并没有很大影响 注意：STM32L496ZG的DAC只有一个，且通道固定是PA4, PA5，而这个引脚也同时是SPI1的默认引脚，注意不要公用时冲突 同时，DAC要转换的数值由DMA提供，从内存中直接经其通道传输给DAC的通道进行转换 需要配置其DMA，添加： 表示将内存中的数值送到DAC_CH1，也就是PA4，注意选择circluar，这样才可以循环输出产生持续的正弦波 ","date":"2023-05-19","objectID":"/techBlog/posts/stm32_dac_dma/:1:0","tags":["STM32"],"title":"STM32 DAC+DMA 输出正弦波","uri":"/techBlog/posts/stm32_dac_dma/"},{"categories":["Development"],"content":"TIM 定时器需要让它产生Trigger信号 这里的update event指的就是定时器计数器满，定时器计数值满后就会触发DAC，这里的触发不是中断 所以定时器触发的频率等同于采样率 ","date":"2023-05-19","objectID":"/techBlog/posts/stm32_dac_dma/:2:0","tags":["STM32"],"title":"STM32 DAC+DMA 输出正弦波","uri":"/techBlog/posts/stm32_dac_dma/"},{"categories":["Development"],"content":"程序 启动： HAL_TIM_Base_Start(\u0026htim5); // 启动tim5 无需中断 HAL_DAC_Start_DMA(\u0026hdac1, DAC_CHANNEL_1, (uint32_t *)Sine12bit, 100, DAC_ALIGN_12B_R); // 启动DAC_DMA模式 这样就可以把Sine12bit输出了 \u0026hdac1指出了dac对象，DAC_CHHANNEL_1为通道，SIine12bit传输的是指针，代表的是内存地址，也就是输出的源地址，100是数量，DAC_ALIGN_12B_R代表对齐方式，这个和寄存器有关，这里不细讲了 这里提供一个Sine12bit数组： const uint16_t Sine12bit[100]={ 0x0800,0x0881,0x0901,0x0980,0x09FD,0x0A79,0x0AF2,0x0B68,0x0BDA,0x0C49, 0x0CB3,0x0D19,0x0D79,0x0DD4,0x0E29,0x0E78,0x0EC0,0x0F02,0x0F3C,0x0F6F, 0x0F9B,0x0FBF,0x0FDB,0x0FEF,0x0FFB,0x0FFF,0x0FFB,0x0FEF,0x0FDB,0x0FBF, 0x0F9B,0x0F6F,0x0F3C,0x0F02,0x0EC0,0x0E78,0x0E29,0x0DD4,0x0D79,0x0D19, 0x0CB3,0x0C49,0x0BDA,0x0B68,0x0AF2,0x0A79,0x09FD,0x0980,0x0901,0x0881, 0x0800,0x077F,0x06FF,0x0680,0x0603,0x0587,0x050E,0x0498,0x0426,0x03B7, 0x034D,0x02E7,0x0287,0x022C,0x01D7,0x0188,0x0140,0x00FE,0x00C4,0x0091, 0x0065,0x0041,0x0025,0x0011,0x0005,0x0001,0x0005,0x0011,0x0025,0x0041, 0x0065,0x0091,0x00C4,0x00FE,0x0140,0x0188,0x01D7,0x022C,0x0287,0x02E7, 0x034D,0x03B7,0x0426,0x0498,0x050E,0x0587,0x0603,0x0680,0x06FF,0x077F, }; 这里是$0 \\sim 2^{12} -1$的值，转换成电压为 $0 \\sim 3.3V$ 在PA4处便可得到正弦波： ","date":"2023-05-19","objectID":"/techBlog/posts/stm32_dac_dma/:3:0","tags":["STM32"],"title":"STM32 DAC+DMA 输出正弦波","uri":"/techBlog/posts/stm32_dac_dma/"},{"categories":["Development"],"content":"基于定时器实现对较高频率的测量 捕获模式（测周法） 定时器可以对输入的PWM波进行边缘检测，同时也可以发出PWM波 定时器内部自己在对时钟进行计数，到达一定值(AAR)后重载为0 最开始想的是测频法，因为这样不仅可以测周期还可以调整捕获的极性以测占空比，但实验发现在频率上了$kHz$就有问题了，而且是难以言明的问题，捕获和计数器变得不靠谱起来，所以这个方法也还是只适合低频 ","date":"2023-05-13","objectID":"/techBlog/posts/stm32l4-timer/:0:0","tags":["STM32"],"title":"STM32 定时器测量高频率","uri":"/techBlog/posts/stm32l4-timer/"},{"categories":["Development"],"content":"生成 PWM波 先设置一个定时器的时钟为内部时钟Internal Clock，值就是时钟图里的HCLK，配置一个通道为PWM Generation CHx 然后设置它的： PSC：预分频系数，$\\mathrm{HCLK} / (\\mathrm{PSC}+1)$ 才是定时器的内部时钟频率 counter period：这个决定了PWM波的周期（注意也要-1），计数到这个值后归零 pulse: 这个和period决定了占空比 比如这里，如果HCLK设置的是50MHz（在时钟图里改），那么定时器的内部时钟频率就是： $$ \\mathrm{CLK_{internal}} = \\frac{50M}{500} = 100 \\mathrm{kHz} $$ 产生的PWM波频率是： $$ f = \\frac{100k}{100} = 1 \\mathrm{kHz} $$ 占空比为： $$ duty = \\frac{50}{100} * 100% = 50% $$ 为向上的高电平 在main.c里面使用 HAL_TIM_PWM_Start(\u0026htim3, TIM_CHANNEL_1); // 启动PWM 如此便能生成了，在对应的引脚便可得到 ","date":"2023-05-13","objectID":"/techBlog/posts/stm32l4-timer/:1:0","tags":["STM32"],"title":"STM32 定时器测量高频率","uri":"/techBlog/posts/stm32l4-timer/"},{"categories":["Development"],"content":"内部时钟-捕获 通道选择Input Capture Direct Mode 然后内部时钟也是一样有个预分频系数可以设置 然后设置AAR即自动重载值，计数器计到这个就会自动归0 极性选择上升沿，它就会捕获输入信号的上升沿，注意开启中断 它的计数器频率同理 在程序中调用 HAL_TIM_Base_Start_IT(\u0026htim4); 这样其实就同时开启了捕获中断和溢出中断，也可以分别开启 void _HAL_TIM_ENABLE_IT(\u0026htim4, TIM_IT_UPDATE); //溢出中断 void HAL_TIM_IC_Start_IT(\u0026htim4,TIM_CHANNEL_1); // IC捕获中断 回调函数是： void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim); // 溢出回调 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim); // 捕获回调函数 修改极性的办法： __HAL_TIM_SET_CAPTUREPOLARITY(\u0026htim4,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING); //设置成下降沿触发 当捕获到上升沿后，在回调函数内切换为捕获下降沿，再次捕获，根据两次的计数值和中间溢出的次数就可以算出输入的信号的脉宽 外部时钟（测频法） 定时器的计数器所作用的时钟是可以改成外部时钟的 最开始想到测频法，还是利用的输入捕获的方式，也就是自己定义一个变量，捕获一次就+1这种想法，这种由于回调函数内容变得只有一行： void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ cnt ++; } 所以它确实能够提高测量的频率上限，但是在测到1MHz还是不行了 本来打算麻烦队友改电路降低频率了，但是我又在睡着前想到：单片机有能力对50MHz的HCLK进行分频，那么肯定不会说1MHz的频率太快了来不及响应 然后我想到之间把输入信号接到定时器上去，替换原本的内部时钟，这样就和分频是一样的道理，肯定是能够记录到脉冲个数的 事实确实如此 定时器可以通过外部时钟触发计数，经过实验也得到验证，10MHz也不是问题了 配置方法： CubeMX里面：定时器Clock Source选择ETR2即可，无需中断，无需配置channel，它有写死的一个TIMx_ETR通道，将外部信号接到这个就行了 它会自动对外接的信号进行计数，所以也需要配置一下预分频和重载值，就等同于平替了原来的HCLK 在程序中： 启动： HAL_TIM_Base_Start(\u0026htim2); TIM2-\u003eCNT = 0; 然后设以TIM4作为参考时钟，设置其溢出中断间隔为1s即1Hz，溢出时在其回调函数内读取TIM2的CNT即可（配置好TIM2不会计数溢出） 就这么简单 ","date":"2023-05-13","objectID":"/techBlog/posts/stm32l4-timer/:2:0","tags":["STM32"],"title":"STM32 定时器测量高频率","uri":"/techBlog/posts/stm32l4-timer/"},{"categories":["Development"],"content":"本文以STM32L496为例介绍如何在HAL库下驱动OLED ","date":"2023-05-04","objectID":"/techBlog/posts/stm32l4-oled/:0:0","tags":["STM32"],"title":"基于HAL库的OLED驱动方法 (SPI)","uri":"/techBlog/posts/stm32l4-oled/"},{"categories":["Development"],"content":"写在前面 网络上也有不少用HAL库的工程，但实验并未成功，目前也没有想清楚为什么，此处仅介绍成功的一种驱动方法 ","date":"2023-05-04","objectID":"/techBlog/posts/stm32l4-oled/:1:0","tags":["STM32"],"title":"基于HAL库的OLED驱动方法 (SPI)","uri":"/techBlog/posts/stm32l4-oled/"},{"categories":["Development"],"content":"核心部分 CSDN，淘宝找到一个用HAL库的工程： 核心完全是GPIO口的配置，在oled.c文件内存在一个OLED_Init()函数，这里面会对GPIO口重新配置，所以不仅仅是改oled.h文件那里对引脚的重定义 假设在Cube里配置成和这里一样，然后注释掉这里，理论上应该能行，但保险起见还是别这样 最方便的就是别改，就按着给定连线就行，马上就能用 为了能够增加灵活性我将这里进行了修改，以后只需要在Cube里定义好同样的别名就行了 void OLED_Init(void) { GPIO_InitTypeDef GPIO_InitStruct; /* GPIO Ports Clock Enable */ __HAL_RCC_GPIOH_CLK_ENABLE(); __HAL_RCC_GPIOA_CLK_ENABLE(); __HAL_RCC_GPIOC_CLK_ENABLE(); __HAL_RCC_GPIOD_CLK_ENABLE(); __HAL_RCC_GPIOB_CLK_ENABLE(); OLED_SCLK_Set(); OLED_SDIN_Set(); OLED_CS_Set(); OLED_RST_Set(); OLED_DC_Set(); LED_ON; /*Configure GPIO pins*/ GPIO_InitStruct.Pin = SCK_Pin; GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //这里和spi.c里面还是不一样 GPIO_InitStruct.Pull = GPIO_PULLUP; GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; HAL_GPIO_Init(SCK_GPIO_Port, \u0026GPIO_InitStruct); GPIO_InitStruct.Pin = SDA_Pin; GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //这里和spi.c里面还是不一样 GPIO_InitStruct.Pull = GPIO_PULLUP; GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; HAL_GPIO_Init(SDA_GPIO_Port, \u0026GPIO_InitStruct); GPIO_InitStruct.Pin = OLED_CS_Pin; GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //这里和spi.c里面还是不一样 GPIO_InitStruct.Pull = GPIO_PULLUP; GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; HAL_GPIO_Init(OLED_CS_GPIO_Port, \u0026GPIO_InitStruct); GPIO_InitStruct.Pin = LD2_Pin; GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; GPIO_InitStruct.Pull = GPIO_NOPULL; GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; HAL_GPIO_Init(GPIOB, \u0026GPIO_InitStruct); GPIO_InitStruct.Pin = OLED_RST_Pin; GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; GPIO_InitStruct.Pull = GPIO_PULLUP; GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; HAL_GPIO_Init(OLED_RST_GPIO_Port, \u0026GPIO_InitStruct); /*Configure GPIO pin : PtPin */ GPIO_InitStruct.Pin = OLED_DC_Pin; GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; GPIO_InitStruct.Pull = GPIO_PULLUP; GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; HAL_GPIO_Init(OLED_DC_GPIO_Port, \u0026GPIO_InitStruct); OLED_RST_Clr(); HAL_Delay(200); OLED_RST_Set(); OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel OLED_WR_Byte(0x00,OLED_CMD);//---set low column address OLED_WR_Byte(0x10,OLED_CMD);//---set high column address OLED_WR_Byte(0x40,OLED_CMD);//--set start line address Set Mapping RAM Display Start Line (0x00~0x3F) OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping 0xa0左右反置 0xa1正常 OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction 0xc0上下反置 0xc8正常 OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64) OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset Shift Mapping RAM Counter (0x00~0x3F) OLED_WR_Byte(0x00,OLED_CMD);//-not offset OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks \u0026 Discharge as 1 Clock OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration OLED_WR_Byte(0x12,OLED_CMD); OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02) OLED_WR_Byte(0x02,OLED_CMD);// OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5) OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) OLED_WR_Byte(0xAF,OLED_CMD); OLED_Clear(); } #define OLED_SCLK_Clr() HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);//CLK #define OLED_SCLK_Set() HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET); #define OLED_SDIN_Clr() HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, GPIO_PIN_RESET)//DIN #define OLED_SDIN_Set() HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, GPIO_PIN_SET) #def","date":"2023-05-04","objectID":"/techBlog/posts/stm32l4-oled/:2:0","tags":["STM32"],"title":"基于HAL库的OLED驱动方法 (SPI)","uri":"/techBlog/posts/stm32l4-oled/"},{"categories":["Development"],"content":"个性化 如果一直放在while循环里循环显示，则会阻塞到其它功能 其实只需要show一次即可 HAL_Delay(500); OLED_Clear(); OLED_ShowNum(103,48,24,3,16); // show num 24 OLED_Refresh(); 103,48 是坐标；3是位数，表示显示的是024；16是字号大小 注意，字号只有16，24，32，64，分别对应于oledfont.h的Hzk1~4 用取模软件得到字符，放入Hzk数组其中即可，可参考其几个Show函数的实现 核心源文件 ","date":"2023-05-04","objectID":"/techBlog/posts/stm32l4-oled/:3:0","tags":["STM32"],"title":"基于HAL库的OLED驱动方法 (SPI)","uri":"/techBlog/posts/stm32l4-oled/"},{"categories":["coding"],"content":"topological sort","date":"2023-05-04","objectID":"/techBlog/posts/topological-sort/","tags":["图"],"title":"拓扑排序","uri":"/techBlog/posts/topological-sort/"},{"categories":["coding"],"content":"拓扑排序简单来说就是剥皮 ","date":"2023-05-04","objectID":"/techBlog/posts/topological-sort/:0:0","tags":["图"],"title":"拓扑排序","uri":"/techBlog/posts/topological-sort/"},{"categories":["coding"],"content":"依赖关系和环 课程表先修问题 华为机考的题 ","date":"2023-05-04","objectID":"/techBlog/posts/topological-sort/:1:0","tags":["图"],"title":"拓扑排序","uri":"/techBlog/posts/topological-sort/"},{"categories":["coding"],"content":"最小高度 从最简单的情况开始，逐步加上去，就不难发现这个规律了 leetcode t310 class Solution { // 拓扑排序 public: vector\u003cint\u003e findMinHeightTrees(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 edges) { // 要想到拓扑排序，首先得意识到，这个最短树它其实是可以一层一层给剖出来的 // 没有认识到这个规律就想不到拓扑排序 vector\u003cint\u003e res; //! 总有比较奇葩的特殊情况 if (n == 1) { res.push_back(0); return res; } // todo 邻接表（比邻接矩阵好一些） vector\u003cvector\u003cint\u003e\u003e adjMap(n); vector\u003cint\u003e degree(n,0); // 记录度的表，拓扑排序需要这个 for (auto edge: edges){ adjMap[edge[0]].push_back(edge[1]); adjMap[edge[1]].push_back(edge[0]); degree[edge[0]]++; degree[edge[1]]++; } queue\u003cint\u003e leaves; // todo 加入叶子节点（度为1的） for (int i = 0; i \u003c n; i++){ if (degree[i]==1) leaves.push(i); } // todo BFS遍历，一直到最后一层就是最短树的节点了，这是建立在认识到的规律得出的结论上的 while (!leaves.empty()) { // todo 叶子节点取出来，要放进res里面，后面会被更新，最后在其中的就是目标 res.clear(); //* 需要更新 // todo 取出这一层叶子节点的方法 //? 我之前想的是队列放入的是一个个向量，但其实可以通过个数来做到 int sz = leaves.size(); for (int i = 0; i \u003c sz; i++){ // 出队多少次 int leaf = leaves.front(); leaves.pop(); res.push_back(leaf); // 放入res // todo 出队后，更新度和相邻节点的度 degree[leaf]--; //? 这还是必要的 for (auto neibor: adjMap[leaf]){ degree[neibor]--; if (degree[neibor] == 1) leaves.push(neibor); //? 在这里就顺便一起判断了 } } } return res; } }; ","date":"2023-05-04","objectID":"/techBlog/posts/topological-sort/:2:0","tags":["图"],"title":"拓扑排序","uri":"/techBlog/posts/topological-sort/"},{"categories":["coding"],"content":"定义的安全节点 其实感觉和最小高度类似，想必也是有类似的规律，只是这次不见得是度为1的 leetcode t802 class Solution { public: vector\u003cint\u003e eventualSafeNodes(vector\u003cvector\u003cint\u003e\u003e\u0026 graph) { // 出度为0是终端节点 // graph[i]中都是终端节点的是安全节点 // 终端节点一定是安全节点 // 如果去掉第一层终端节点，新产生的终端节点在原来的图上一定是都连向终端节点的，因此也一定是安全节点 // 如果去掉第二层终端节点，新产生的终端节点在原来的图上，一定有连向第二层的，那么就不是安全节点 // 所以应该就只是前两层的终端节点？还是都是？好吧，这也算 vector\u003cint\u003e res; int N = graph.size(); vector\u003cint\u003e degree(N); queue\u003cint\u003e terminals; // todo 还需要一个入的graph vector\u003cvector\u003cint\u003e\u003e parents(N); for (int i = 0; i \u003c N; i++){ degree[i] = graph[i].size(); if (degree[i] == 0) terminals.push(i); for (auto cd : graph[i]){ parents[cd].push_back(i); } } int cnt = 0; while (cnt !=2 \u0026\u0026 !terminals.empty()){ //只看前两层 int sz = terminals.size(); for (int i = 0; i \u003c sz; i++){ int tml = terminals.front(); terminals.pop(); res.push_back(tml); degree[tml] --; for (auto neibor : parents[tml]){ degree[neibor]--; if (degree[neibor] == 0) terminals.push(neibor); } } cnt ++; } sort(res.begin(), res.end()); return res; } }; ","date":"2023-05-04","objectID":"/techBlog/posts/topological-sort/:3:0","tags":["图"],"title":"拓扑排序","uri":"/techBlog/posts/topological-sort/"},{"categories":["coding"],"content":"shortest path","date":"2023-05-04","objectID":"/techBlog/posts/shortest-path/","tags":["图"],"title":"最短路问题","uri":"/techBlog/posts/shortest-path/"},{"categories":["coding"],"content":"此处主要主要介绍两种算法 ","date":"2023-05-04","objectID":"/techBlog/posts/shortest-path/:0:0","tags":["图"],"title":"最短路问题","uri":"/techBlog/posts/shortest-path/"},{"categories":["coding"],"content":"Dijkstra 算法 贪心算法，和最小生成树的Prim算法很接近，只是是以起点为中心找总的最短的路径，会那个就会这个 ","date":"2023-05-04","objectID":"/techBlog/posts/shortest-path/:1:0","tags":["图"],"title":"最短路问题","uri":"/techBlog/posts/shortest-path/"},{"categories":["coding"],"content":"Floyd 算法 运用了动态规划的思想，状态转移方程为： $$ dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); $$ 即，节点i和j之间的最短路径，应当是比较【直达】还是【换乘】 开始数组dist初始化为任意两个节点之间的路径，然后三重循环遍历 for (int k = 0; k \u003c v; ++k){ for (int i = 0; i \u003c v; ++i){ for (int j = 0; j \u003c v; ++j){ dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); } } } 这个先后顺序应该是有影响的，还是画矩阵图比较好记 ","date":"2023-05-04","objectID":"/techBlog/posts/shortest-path/:2:0","tags":["图"],"title":"最短路问题","uri":"/techBlog/posts/shortest-path/"},{"categories":["coding"],"content":"Bellman-Ford 算法 适合那种限制经过的边数、节点数的问题 核心算法： for (auto i = 0; i \u003c n - 1; i++) { for (auto j = 0; j \u003c m; j++) {//对m条边进行循环 auto edge = edges[j]; // 松弛操作 auto dist_tmp = distance; // 保证在同一次下彼此不受影响 if (distance[edge.to] \u003e dist_tmp[edge.from] + edge.weight ){ // 小心溢出 distance[edge.to] = dist_tmp[edge.from] + edge.weight; } } } 刚开始源点到其它节点的距离都是INF，那么i=0时只有从源点出发的边能够被修改，完成后代表的是只能经过1点边情况下的最短路径 依次类推，遍历完i时距离表表示的是最多能经过i+1条边所用的最短距离 ","date":"2023-05-04","objectID":"/techBlog/posts/shortest-path/:3:0","tags":["图"],"title":"最短路问题","uri":"/techBlog/posts/shortest-path/"},{"categories":["coding"],"content":"min tree","date":"2023-04-23","objectID":"/techBlog/posts/minimum-spanning-tree/","tags":["图"],"title":"最小生成树","uri":"/techBlog/posts/minimum-spanning-tree/"},{"categories":["coding"],"content":"此处主要记录最小生成树的个人理解，目标是为了个人复习，而不是为了讲清楚 一张图的树可以有很多种，找到权重和最小的那棵树 Prim 算法 前置工作：得到邻接矩阵 输入部分可能要想一想怎么构建出邻接矩阵 邻接矩阵的值： 0：表示自己（后面也顺便成了访问过的标记） INF：表示不直接相连 正整数：表示权重（距离） 假设从v0节点开始，先取出邻接矩阵的该行，表示的是到其它各个节点的距离（也包括了自己） 现在有两个数组，一个用于记录到其它节点的距离（权重），另一个表示是从哪个节点看过去的，刚开始都是从v0出发来看的，因此初始化为0，即v0的id 遍历剩余的节点 找到距离最近的那个（擂台法）（0距离的不参与） 记录这个节点的id 从这个节点出发看其它节点的距离，与原来数组的值比较，取最小的，如果从这个节点更近，则需要修改出发节点为该节点id（主要是为了输出） 这样距离数组就是这个节点和初始节点（前面的节点）作为一个整体到其它节点的距离了 为了避免重复，要把以及访问过的节点在距离数组中都改为0，这样就不会把访问过的也拿进去参与比较 这样直至整个距离数组都是0了 注意，起始节点可以是任意一个 与Dijkstra的区别是这个是找相对于这个整体最近的，而Dijkstra永远是找从起始节点出发最短的路，比较的是直接到达和简介抵达哪个最短 Kruskal 算法 与上一个不同，这个要构建边集 边集数组记录改边连通的起始节点和终止节点，以及距离 思想就是：首先进行排序，依次取出最小的边，跳过会让图形成回路的边就完事了 主要是如何判断已经形成了回路 定义一个终点节点数组，记录每个节点的最小生成树的终止节点 刚开始都初始化为0 考虑如果放入一条边：查找这条边的起始节点和终止节点 如果该节点在终止数组里面不为0，就顺着找下去，直到为0，这个过程相当于是在沿着节点所在的树走直到走到终点，那么如果放入这点边，我应该把这个终点和终止节点的终点连上，让它合并为一棵树 如果它们找到了相同的终点，则说明已经在同一颗树里面，连上则会形成回路，因此不能要 ","date":"2023-04-23","objectID":"/techBlog/posts/minimum-spanning-tree/:0:0","tags":["图"],"title":"最小生成树","uri":"/techBlog/posts/minimum-spanning-tree/"},{"categories":["Development"],"content":"qt usage tutorial","date":"2023-04-21","objectID":"/techBlog/posts/qt-creator-serialport/","tags":["Qt","串口"],"title":"Qt 开发上位机程序","uri":"/techBlog/posts/qt-creator-serialport/"},{"categories":["Development"],"content":"利用Qt creator 开发一个上位机程序，能够实现显示单片机返回的数据，增加展示效果，但可调式性必然没有以及成熟的好 ","date":"2023-04-21","objectID":"/techBlog/posts/qt-creator-serialport/:0:0","tags":["Qt","串口"],"title":"Qt 开发上位机程序","uri":"/techBlog/posts/qt-creator-serialport/"},{"categories":["Development"],"content":"基本认识 Qt 生成一个主窗口，然后会陷入事件循环，直至用户关闭程序才会执行main函数后面的代码 Qt 生成的窗口样式是和操作系统相关的，Qt 可以设置一些属性，但一些特别的属性依赖于系统主题，Qt 无法控制，所以改了也没有用 QMainWindow继承自QWidget，增加了菜单栏、状态栏之类的东西，比如经常有看到的“文件、工具”等待选项，这些并非是必要的 在ui界面上的东西，是属于ui这个对象的成员 ","date":"2023-04-21","objectID":"/techBlog/posts/qt-creator-serialport/:1:0","tags":["Qt","串口"],"title":"Qt 开发上位机程序","uri":"/techBlog/posts/qt-creator-serialport/"},{"categories":["Development"],"content":"自定义窗口 如果完全自定义则关闭、最大化、最小化这些都要自己配置了 实在太麻烦，还是就这样了吧，win11的也不算丑了 ","date":"2023-04-21","objectID":"/techBlog/posts/qt-creator-serialport/:2:0","tags":["Qt","串口"],"title":"Qt 开发上位机程序","uri":"/techBlog/posts/qt-creator-serialport/"},{"categories":["Development"],"content":"本文基于STM32CubeMX + Keil5 的开发，介绍该型号的配置和使用方法 写在前面 重要手册： UM2179: STM32 Nucleo-144 boards (MB1312) 是NUCLEO-144系列开发板的相关手册，可谓最重要的参考文档 DS11585 是板载的MCU手册，用处不大，现在基本不会用裸机 STM32L073xx_User_Manual.chm 这个一般位于cube安装的pack里面（\\STM32Cube\\Repository\\STM32Cube_FW_L0_V1.12.2\\Drivers\\STM32L0xx_HAL_Driver），是HAL库的手册，用HAL库的都有类似的文档，因此不必纠结是不是L0系列 STM32CubeMX CubeMX最直接的好处就是可视化配置+代码框架，在其中配置好生成代码即可 CubeMX的不同版本界面差别挺大，笔者用的是 STM32CubeMX-Win 6.8.0，也建议紧跟时代用新版，免费软件没问题的 ","date":"2023-04-21","objectID":"/techBlog/posts/nucleol496zg/:0:0","tags":["STM32"],"title":"基于NUCLEO-L496ZG开发","uri":"/techBlog/posts/nucleol496zg/"},{"categories":["Development"],"content":"选型 在Pakages Manager 里面安装L4系列的MCU Pack 在new project里，直接选板子，板子和其MCU型号是对应了的，这样生成的界面才能看到一些重要管脚定义 ","date":"2023-04-21","objectID":"/techBlog/posts/nucleol496zg/:1:0","tags":["STM32"],"title":"基于NUCLEO-L496ZG开发","uri":"/techBlog/posts/nucleol496zg/"},{"categories":["Development"],"content":"配置 主要需要配置 LPUART 和 ADC LPUART 用于和PC机直接通过USB线通信（因为它是和STLINK连接的），默认是使能了的，但还需要自行配置其波特率等参数 ADC 要Enable其引脚，否则即使在引脚端选择了也还是黄色的而非绿色，要注意别忘了 如果需要用中断方式，记得配置 Global Interupt ","date":"2023-04-21","objectID":"/techBlog/posts/nucleol496zg/:2:0","tags":["STM32"],"title":"基于NUCLEO-L496ZG开发","uri":"/techBlog/posts/nucleol496zg/"},{"categories":["Development"],"content":"生成代码 注意在generate code的时候记得选分文件（不是必要，但有利于阅读） 并且要注意toolchain的最小版本是否合适 项目名字一旦取定则无法更改 Keil 在keil上需要安装l4系列的pack，注意由于官网的pack一般是新版，可能直接安装就旧版Keil上会出现这样的问题： 这个并不太会影响正常使用，作为强迫症患者最好换新版Keil 在Keil上的魔法棒（option for target)，要注意配置两个地方 target下面，勾选Use MicroLIB，这个具体什么原因笔者还未了解清楚，只知道如果不选则 LPUART发送数据会卡住，无法继续执行代码（但调试可以），所以如果用户在使用时发现拷了代码进去却没反应，有可能就是卡住了，记得检查这里 debug下面，选 use J-LINK / J-TRACE Cortex，虽然文档说是用的 STLINK V2-1，但实际插上之后显示的是JLINK设备，具体为什么也不清楚。然后在setting里面port选SW 若还有其它的问题，会在下载时报错，根据报错信息应该也能很快解决，只需耐心读 Code 编程要学会重定义 printf函数，具体做法是在main函数里： #include \"stdio.h\" int fputc(int ch, FILE *f) { HAL_UART_Transmit(\u0026hlpuart1, (uint8_t *)\u0026ch, 1 , 0xffff); return ch; } 此外注意自己加的内容放到注释里面写的 Begin - End 之间，这样在修改CubeMX之后重新生成不会把自己的代码覆盖掉 建议在VScode或者其它编辑器进行编辑，keil IAR 等软件的代码编辑界面都是否老古董，用着难受，具体配置请自行搜索 整个代码用的是HAL库，虽然在源文件里面看不到对应的include信息，但其实在Keil里面它是自己预定义过了的 网上找到教程有些不是HAL库，因此函数名不一样，HAL库的函数一般都会以HAL_开头，注意不要无脑CV 😊 ","date":"2023-04-21","objectID":"/techBlog/posts/nucleol496zg/:3:0","tags":["STM32"],"title":"基于NUCLEO-L496ZG开发","uri":"/techBlog/posts/nucleol496zg/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it. ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 Requirements Thanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of  Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo?\rSince Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0.\rHugo extended version is recommended\rSince some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience.\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 Installation The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 Create Your Project Hugo provides a new command to create a new website: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 Install the Theme The LoveIt theme’s repository is: https://github.com/dillonzq/LoveIt. You can download the latest release  .zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt Or, create an empty git repository and make this repository a submodule of your site directory: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 Basic Configuration The following is a basic configuration for the LoveIt theme: baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note\rWhen building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default.\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note\rBy default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command.\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 Launching the Website Locally Launch by using the following command: hugo serve Go to http://localhost:1313. Basic configuration preview\rTip\rWhen you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes.\rNote\rSince the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 Build the Website When your site is ready to deploy, run the following command: hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip\rThe website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more…\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 Configuration ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 Site Configuration In addition to Hugo global configuration and menu configuration, LoveIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = false # default amount of posts in each pages paginate = 12 # google analytics code [UA-XXXXXXXX-X] googleAnalytics = \"\" # copyright description used only for seo schema copyright = \"\" # whether to use robots.txt enableRobotsTXT = true # whether to use git commit log enableGitInfo = true # whether to use emoji code enableEmoji = true # ignore some build errors ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [params] # site default theme [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website title for Open Graph and Twitter Cards title = \"My cool site\" # website description for RSS, SEO, Open Graph and Twitter Cards description = \"This is my cool site\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # Header config [params.header] # desktop header mode [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # mobile header mode [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # App icon config [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"My cool site\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 Favicons, Browserconfig, Manifest It is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They’re easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 Style Customization Note\rHugo extended version is necessary for the style customization.\rLoveIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/LoveIt/assets/css/_variables.scss to customize the style. Here is a example: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 Multilingual and i18n LoveIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language Switch\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 Compatibility Language Hugo Code HTML lang Attribute Theme Docs Lunr.js Support English en en Simplified Chinese zh-cn zh-CN Traditional Chinese zh-tw zh-TW French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro Vietnamese vi vi Arabic ar ar Catalan ca ca Thai th th Telugu te te Indonesian id id Turkish tr tr Korean ko ko Hindi hi hi ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 Basic Configuration After learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: # determines default content language [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" languageCode = \"zh-CN\" languageName = \"简体中文\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" name = \"Catégories\" pre = \"\" post = \"\" url = \"/categories/\" title = \"\" Then, for each new page, append the language code to the file name. Single file my-page.md is split in three files: in English: my-page.en.md in Chinese: my-page.zh-cn.md in French: my-page.fr.md Note\rBe aware that only translated pages are displayed in menu. It’s not replaced with default language content.\rTip\rUse Front Matter parameter to translate urls too.\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 Overwrite Translation Strings Translations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/LoveIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by  making a PR to the theme! ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 Search Based on Lunr.js or algolia, searching is supported in LoveIt theme. ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 Output Configuration In order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 Search Configuration Based on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" How to choose search engine?\rThe following is a comparison of two search engines: lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia\rYou need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. The official Algolia CLI is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json…\r","date":"2020-03-06","objectID":"/techBlog/posts/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/techBlog/posts/theme-documentation-basics/"},{"categories":null,"content":"About LoveIt","date":"2019-08-02","objectID":"/techBlog/about/","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt\r","date":"2019-08-02","objectID":"/techBlog/about/:0:0","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"Features ","date":"2019-08-02","objectID":"/techBlog/about/:1:0","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Plausible Analytics supported  Yandex Metrica supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes ","date":"2019-08-02","objectID":"/techBlog/about/:1:1","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"Appearance and Layout  Desktop/Mobile responsive layout  Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation ","date":"2019-08-02","objectID":"/techBlog/about/:1:2","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 73 social links supported  Up to 24 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  utterances comment system supported by utterances  giscus comment system supported by giscus ","date":"2019-08-02","objectID":"/techBlog/about/:1:3","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightGallery  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $\\KaTeX$  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent  Person shortcode … ","date":"2019-08-02","objectID":"/techBlog/about/:1:4","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. ","date":"2019-08-02","objectID":"/techBlog/about/:2:0","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"},{"categories":null,"content":"Special Thanks Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/techBlog/about/:3:0","tags":null,"title":"About LoveIt","uri":"/techBlog/about/"}]